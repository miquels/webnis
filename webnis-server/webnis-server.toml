# This is the configuration file for webnis-server.
#
# The flow for a map lookup is:
#
# - the request url has a 'domain', 'map', 'keyname' and 'keyvalue'.
#   e.g. https://server/.well-known/webnis/<domain>/<map>?<keyname>=<keyvalue>
# - find the [[domain]] from the client's request URL
# - the domain has a authorization password. check it.
# - see if a lookup in 'map' is allowed for this domain.
# - find the 'map' in the configuration (map name and keyname must both match)
# - lookup the key 'keyname' with value 'keyvalue' in the map and return it.
#
# The flow for authentication is:
# - the the url contains a 'domain'. the request uses the POST method, the
#   type is "x-www-form-urlencoded", and a 'username' and 'pasword' are
#   sent in the request body.
# - find the [[domain]] from the client's request URL
# - the domain has a authorization password. check it.
# - the domain has an "auth" key, it points to an "auth" section
#   e.g. auth = "xs4all" -> [auth.xs4all].
# - the auth section tells the server what map to use, and the key
#   to use for the username lookup.
# - if an entry is found, and it has a "passwd" field with an encrypted
#   password, check the passsword the client sent against that.
#

# server general configuration.
[server]
  # address / port to listen on.
  listen = [ "0.0.0.0:3245", "[::]:3245" ]
  # if tls is enabled, key_file and crt_file must be set as well.
  tls = true
  key_file = "/etc/ssl/private/wildcard.xs4all.net.key"
  crt_file = "/etc/ssl/certs/wildcard.xs4all.net.crt"

# putting a lua script name here enables LUA scripting.
[lua]
  script = "webnis-server.lua"

# multiple domains can be configured.
[[domain]]
  name = "xs4all"
  # HTTP authorization. Set like this, it is Basic Authentication.
  # Other variations are possible (like an X-Api-Key schema).
  http_authschema = "Basic"
  http_authtoken = "username:password"
  http_authencoding = "base64"
  # database directory of the maps. this can be different per domain.
  # we use the legacy NIS directory in this example.
  db_dir = "/var/yp/xs4all.nl"
  # the maps that a client is allowed to do a lookup in.
  maps = [ "passwd", "group", "gidlist", "lua_example" ]
  # the [auth] section to use when a client wants to check a username/password.
  auth = "adjunct"

# Another domain. This one serves different data (note the db_dir setting)
# and only two maps, the "passwd" and the "group" map.
[[domain]]
  name = "shell.xs4all.nl"
  http_authschema = "X-Api-Key"
  http_authtoken = "679865536768646"
  db_dir = "/var/yp/shell.xs4all.nl"
  maps = [ "passwd", "group" ]
  auth = "adjunct"

# This defines an authentication section called "adjunct", which is referred
# to in the [[domain]] sections.
#
# This config says that the username must be looked up in the map "adjunct",
# which is defined in a [map.adjunct] section below.
[auth.adjunct]
  # mapname
  map = "adjunct"
  # key to use
  key = "name"

# The "passwd" map. This map is equivalent to the system's /etc/passwd.
#
# Note that we define it in 3 parts: a base map definition, and then two
# submaps for different keynames: "user" and "uid".
[map.passwd]
  type   = "gdbm"
  format = "passwd"

  # this entry is matched when the lookup key is "name" (or "user",
  # since we define a key alias as well).
  [map.passwd.name]
    key_alias = { user = "name" }
    file      = "passwd.byname"

  # this entry is matched when the lookup key is "uid".
  [map.passwd.uid]
    file = "passwd.byuid"

# this section is (as we have configured it here) not available for lookups
# directly, but the [auth.adjunct] section refers to it.
[map.adjunct.name]
  type   = "gdbm"
  format = "adjunct"
  file   = "passwd.adjunct.byname"

# The maptype here is "json", which means that the file contains
# a JSON array, and each array element contains a group object.
# The objects can be looked up by "name" and "gid".
[map.group]
  keys = [ "name", "gid" ]
  type = "json"
  file = "group"

# This is a Linux specific maptype, used by the glibc NSS implementation.
# It is used to find all the groups that a user is a member of. Rather
# than scanning the entire "group" map, we have a direct
# username -> grouplist map.
[map.gidlist.name]
  type = "json"
  file = "gidlist"

# When a lookup is done in this map, the LUA function "map_example"
# is called, which is defined in the "webnis-server.lua" script.
[map.lua_example.user]
  # type is lua, which means we will call a lua function
  type   = "lua"
  # and this is the name of that function
  lua_function = "map_example"

# Example of manual output mapping. This is basically the same as format = "password".
[map.passwd-other]
  type = "gdbm"
  format = "colon-separated"
  output = { name = "{1}", passwd = "x", uid = "{3}", gid = "{4}", dir = "{6}", shell = "{7}" }

  [map.passwd-other.name]
    key_alias = { user = "name" }
    file      = "passwd.byname"

  [map.passwd-other.uid]
    file = "passwd.byuid"

